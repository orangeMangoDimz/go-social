// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/authentication/token": {
            "post": {
                "description": "Authenticate user with email and password, returns a JWT token for API access",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Login and get authentication token",
                "parameters": [
                    {
                        "description": "User login credentials",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_orangeMangoDimz_go-social_internal_entities_payload.CreateUserTokenPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "JWT token created successfully",
                        "schema": {
                            "$ref": "#/definitions/github_com_orangeMangoDimz_go-social_internal_entities_payload.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - validation error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid credentials",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/authentication/user": {
            "post": {
                "description": "Create a new user account with username, email and password. Returns user information with an activation token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration data",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_orangeMangoDimz_go-social_internal_entities_payload.RegisterUserPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully, activation required",
                        "schema": {
                            "$ref": "#/definitions/github_com_orangeMangoDimz_go-social_internal_entities_payload.UserWithToken"
                        }
                    },
                    "400": {
                        "description": "Bad request - validation error or duplicate email/username",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Returns the current health status, environment, and version of the API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health check endpoint",
                "responses": {
                    "200": {
                        "description": "Health status information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/posts": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new post with title, content and optional tags. Requires JWT authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Create a new post",
                "parameters": [
                    {
                        "description": "Post creation data",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_orangeMangoDimz_go-social_internal_entities_payload.CreatePOstPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Created post",
                        "schema": {
                            "$ref": "#/definitions/github_com_orangeMangoDimz_go-social_internal_entities_posts.Post"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/posts/feed": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a paginated feed of posts from followed users and own posts. Requires JWT authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "feed"
                ],
                "summary": "Get user's post feed",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 20,
                        "example": 10,
                        "description": "Number of posts per page (1-20)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "example": 0,
                        "description": "Number of posts to skip",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order (asc/desc)",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"golang\"",
                        "description": "Search in title and content",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"golang,programming\"",
                        "description": "Comma-separated list of tags",
                        "name": "tags",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"2024-01-01 00:00:00\"",
                        "description": "Posts created after this date",
                        "name": "since",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"2024-12-31 23:59:59\"",
                        "description": "Posts created before this date",
                        "name": "until",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User's post feed",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_orangeMangoDimz_go-social_internal_entities_posts.Feed"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/posts/{postID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed information about a specific post including comments",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Get post by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "Post ID",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Post information with comments",
                        "schema": {
                            "$ref": "#/definitions/github_com_orangeMangoDimz_go-social_internal_entities_posts.Post"
                        }
                    },
                    "404": {
                        "description": "Post not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a specific post by its ID. Requires JWT authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Delete a post",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "Post ID",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Post successfully deleted"
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Post not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the title and/or content of an existing post. Requires JWT authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Update a post",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "Post ID",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Post update data",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_orangeMangoDimz_go-social_internal_entities_payload.UpdatePostPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated post",
                        "schema": {
                            "$ref": "#/definitions/github_com_orangeMangoDimz_go-social_internal_entities_posts.Post"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Post not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/activate/{token}": {
            "put": {
                "description": "Activate a user account using the activation token received during registration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Activate user account",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"550e8400-e29b-41d4-a716-446655440000\"",
                        "description": "Activation token",
                        "name": "token",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "User account activated successfully"
                    },
                    "404": {
                        "description": "Token not found or invalid",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/{userID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed information about a specific user. Requires JWT authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User information",
                        "schema": {
                            "$ref": "#/definitions/github_com_orangeMangoDimz_go-social_internal_entities_users.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/{userID}/follow": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Follow another user to see their posts in your feed. Requires JWT authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Follow a user",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "ID of the user to follow",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully followed user"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Already following this user",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/{userID}/unfollow": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Unfollow a user to stop seeing their posts in your feed. Requires JWT authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Unfollow a user",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "ID of the user to unfollow",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully unfollowed user"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Already unfollowed this user",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "github_com_orangeMangoDimz_go-social_internal_entities_comments.Comment": {
            "description": "Comment on a social media post",
            "type": "object",
            "properties": {
                "content": {
                    "description": "Comment content",
                    "type": "string",
                    "example": "Great post!"
                },
                "created_at": {
                    "description": "Comment creation timestamp",
                    "type": "string",
                    "example": "2024-01-01 12:00:00"
                },
                "id": {
                    "description": "Comment ID",
                    "type": "integer",
                    "example": 1
                },
                "post_id": {
                    "description": "ID of the post this comment belongs to",
                    "type": "integer",
                    "example": 123
                },
                "user": {
                    "description": "User who made the comment",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_orangeMangoDimz_go-social_internal_entities_users.User"
                        }
                    ]
                },
                "user_id": {
                    "description": "ID of the user who made the comment",
                    "type": "integer",
                    "example": 456
                }
            }
        },
        "github_com_orangeMangoDimz_go-social_internal_entities_payload.CreatePOstPayload": {
            "description": "Request payload for creating a new post",
            "type": "object",
            "required": [
                "content",
                "title"
            ],
            "properties": {
                "content": {
                    "description": "Post content (max 1000 characters)",
                    "type": "string",
                    "maxLength": 1000,
                    "example": "This is the content of my post"
                },
                "tags": {
                    "description": "Post tags",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "golang",
                        "programming"
                    ]
                },
                "title": {
                    "description": "Post title (max 100 characters)",
                    "type": "string",
                    "maxLength": 100,
                    "example": "My First Post"
                }
            }
        },
        "github_com_orangeMangoDimz_go-social_internal_entities_payload.CreateUserTokenPayload": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "Email address",
                    "type": "string",
                    "maxLength": 255,
                    "example": "johndoe@example.com"
                },
                "password": {
                    "description": "Password",
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 3,
                    "example": "securepassword123"
                }
            }
        },
        "github_com_orangeMangoDimz_go-social_internal_entities_payload.RegisterUserPayload": {
            "description": "Request payload for user registration",
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "description": "Email address (max 255 characters)",
                    "type": "string",
                    "maxLength": 255,
                    "example": "johndoe@example.com"
                },
                "password": {
                    "description": "Password (3-72 characters)",
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 3,
                    "example": "securepassword123"
                },
                "username": {
                    "description": "Username (max 100 characters)",
                    "type": "string",
                    "maxLength": 100,
                    "example": "johndoe"
                }
            }
        },
        "github_com_orangeMangoDimz_go-social_internal_entities_payload.TokenResponse": {
            "description": "Response containing a JWT authentication token",
            "type": "object",
            "properties": {
                "token": {
                    "description": "JWT authentication token",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "github_com_orangeMangoDimz_go-social_internal_entities_payload.UpdatePostPayload": {
            "description": "Request payload for updating an existing post",
            "type": "object",
            "properties": {
                "content": {
                    "description": "Updated post content (max 1000 characters)",
                    "type": "string",
                    "maxLength": 1000,
                    "example": "Updated post content"
                },
                "title": {
                    "description": "Updated post title (max 100 characters)",
                    "type": "string",
                    "maxLength": 100,
                    "example": "Updated Post Title"
                }
            }
        },
        "github_com_orangeMangoDimz_go-social_internal_entities_payload.UserWithToken": {
            "description": "User information with activation token",
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Account creation timestamp",
                    "type": "string",
                    "example": "2024-01-01 12:00:00"
                },
                "email": {
                    "description": "Email address",
                    "type": "string",
                    "example": "johndoe@example.com"
                },
                "id": {
                    "description": "User ID",
                    "type": "integer",
                    "example": 1
                },
                "is_active": {
                    "type": "boolean"
                },
                "role": {
                    "$ref": "#/definitions/github_com_orangeMangoDimz_go-social_internal_entities_users.Role"
                },
                "role_id": {
                    "type": "integer"
                },
                "token": {
                    "description": "Activation token",
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "username": {
                    "description": "Username",
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "github_com_orangeMangoDimz_go-social_internal_entities_posts.Feed": {
            "description": "Post feed item with comment count",
            "type": "object",
            "properties": {
                "comments": {
                    "description": "Comments on this post",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_orangeMangoDimz_go-social_internal_entities_comments.Comment"
                    }
                },
                "content": {
                    "description": "Post content",
                    "type": "string",
                    "example": "This is my post content"
                },
                "created_at": {
                    "description": "Post creation timestamp",
                    "type": "string",
                    "example": "2024-01-01 12:00:00"
                },
                "id": {
                    "description": "Post ID",
                    "type": "integer",
                    "example": 1
                },
                "tags": {
                    "description": "Post tags",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "golang",
                        "programming"
                    ]
                },
                "title": {
                    "description": "Post title",
                    "type": "string",
                    "example": "My First Post"
                },
                "total_comment": {
                    "description": "Total number of comments on this post",
                    "type": "integer",
                    "example": 5
                },
                "updated_at": {
                    "description": "Post last update timestamp",
                    "type": "string",
                    "example": "2024-01-01 12:30:00"
                },
                "user": {
                    "description": "User who created the post",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_orangeMangoDimz_go-social_internal_entities_users.User"
                        }
                    ]
                },
                "user_id": {
                    "description": "ID of the user who created the post",
                    "type": "integer",
                    "example": 123
                },
                "version": {
                    "description": "Post version for optimistic locking",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "github_com_orangeMangoDimz_go-social_internal_entities_posts.Post": {
            "description": "Social media post with content, tags and metadata",
            "type": "object",
            "properties": {
                "comments": {
                    "description": "Comments on this post",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_orangeMangoDimz_go-social_internal_entities_comments.Comment"
                    }
                },
                "content": {
                    "description": "Post content",
                    "type": "string",
                    "example": "This is my post content"
                },
                "created_at": {
                    "description": "Post creation timestamp",
                    "type": "string",
                    "example": "2024-01-01 12:00:00"
                },
                "id": {
                    "description": "Post ID",
                    "type": "integer",
                    "example": 1
                },
                "tags": {
                    "description": "Post tags",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "golang",
                        "programming"
                    ]
                },
                "title": {
                    "description": "Post title",
                    "type": "string",
                    "example": "My First Post"
                },
                "updated_at": {
                    "description": "Post last update timestamp",
                    "type": "string",
                    "example": "2024-01-01 12:30:00"
                },
                "user": {
                    "description": "User who created the post",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_orangeMangoDimz_go-social_internal_entities_users.User"
                        }
                    ]
                },
                "user_id": {
                    "description": "ID of the user who created the post",
                    "type": "integer",
                    "example": 123
                },
                "version": {
                    "description": "Post version for optimistic locking",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "github_com_orangeMangoDimz_go-social_internal_entities_users.Role": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "level": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "github_com_orangeMangoDimz_go-social_internal_entities_users.User": {
            "description": "User account information",
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Account creation timestamp",
                    "type": "string",
                    "example": "2024-01-01 12:00:00"
                },
                "email": {
                    "description": "Email address",
                    "type": "string",
                    "example": "johndoe@example.com"
                },
                "id": {
                    "description": "User ID",
                    "type": "integer",
                    "example": 1
                },
                "is_active": {
                    "type": "boolean"
                },
                "role": {
                    "$ref": "#/definitions/github_com_orangeMangoDimz_go-social_internal_entities_users.Role"
                },
                "role_id": {
                    "type": "integer"
                },
                "username": {
                    "description": "Username",
                    "type": "string",
                    "example": "johndoe"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "API Key for authorization",
            "type": "apiKey",
            "name": "X-API-KEY",
            "in": "header"
        },
        "BearerAuth": {
            "description": "Enter your bearer token in the format **Bearer \u0026lt;token\u0026gt;**",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.1.0",
	Host:             "localhost:8080",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "Gopher Social API",
	Description:      "A social media API service built with Go featuring user management, posts, comments, and following functionality",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
